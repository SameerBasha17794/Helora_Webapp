jQuery( document ).ready(function($) {

    GMW_XF = {

        submit : false,
        
        submitted : false,

        submit_button : false,

        geocoder_type : $( '#gmw_xf_geocoder' ).val(),

        autocomplete_options : {},

        gmw_settings : gmw_xf_settings,

        /**
         * Init script
         * 
         * @return {[type]} [description]
         */
        init : function() {

            // abort if hidden field are not preset in the form
            if ( $( '#gmw_xf_geocoder' ).length == 0 ) {
                return false;
            }

            // initiate autofill 
            if ( $( '#gmw_xf_autofill_enabled' ).length != 0 ) {
                GMW_XF.address_autofill();
            }

            // initiate autocomplete
            if ( $( '[data-geocoder_field="address"][data-address_autocomplete="1"]' ).lenght != 0 ) {

                GMW_XF.address_autocomplete( $( '[data-geocoder_field="address"][data-address_autocomplete="1"]' ).attr( 'id' ) );
            }

            // Clear geocoder fields when changing any of the address text-box fields
            $( 'input[data-gmw_xf_geocoder_enabled="1"][type="text"]' ).on( 'input', function() {
                GMW_XF.clear_fields();
            });

            // Clear geocoder fields when changing any of the address select dropdown fields
            $( 'select[data-gmw_xf_geocoder_enabled="1"], input[data-gmw_xf_geocoder_enabled="1"][type="radio"]' ).on( 'change', function() {
                GMW_XF.clear_fields();
            });

            // run geocoder on form submission
            $( '#buddypress #profile-edit-form, #buddypress #signup_form, .users_page_bp-profile-edit #your-profile' ).on( 'submit', function( event ) {

                // proceed with submission if address is already geocoded
                if ( $( '#gmw_xf_status' ).val() == '1' || GMW_XF.submit == true ) {
                    return true;
                }

                GMW_XF.submitted = true;

                // stop submission
                event.preventDefault();

                // get the form submit button
                GMW_XF.submit_button = $( this ).find( ':submit' );

                // run geocoder
                GMW_XF.address_geocoder();
            });
        },

        /**
         * Clear geocoder fields 
         * 
         * @return {[type]} [description]
         */
        clear_fields : function() {
            $( '.gmw-xf-geocoder-field' ).val( '' )
            $( '#gmw_xf_geocoder_updated' ).val( '1' );
        },

        /** 
         * Address autocomplete
         * 
         * @param  {[type]} field_id [description]
         * @return {[type]}          [description]
         */
        address_autocomplete : function( field_id ) {
            
            var input = document.getElementById( field_id );

            var autocomplete = new google.maps.places.Autocomplete( input, GMW_XF.autocomplete_options );
            
            google.maps.event.addListener( autocomplete, 'place_changed', function( event ) {
                
                var place = autocomplete.getPlace();

                if ( ! place.geometry ) {
                    return;
                }
                
                //$('#'.autoComp).val( place.formatted_address );
                        
            });

        },

        /**
         * Address autofill trigger
         * 
         * @return {[type]} [description]
         */
        address_autofill : function() {

            if ( navigator.geolocation ) {
                navigator.geolocation.getCurrentPosition( GMW_XF.navigator_success, GMW_XF.navigator_failed );   
            }
        },

        /**
         * Navigator success callback function
         * 
         * @param  {[type]} position [description]
         * 
         * @return {[type]}          [description]
         */
        navigator_success : function( position ) {
            
            // init geocoder
            var geocoder = new google.maps.Geocoder();

            // geocode coordinates
            geocoder.geocode( { 'latLng' : new google.maps.LatLng( position.coords.latitude, position.coords.longitude ) }, function ( results, status ) {
                
                // if geocoder success, populate the address fields
                if ( status == google.maps.GeocoderStatus.OK ) {
                    
                    GMW_XF.populate_address_fields( results, 'autofill' );
                } 
            });
        },
        
        /**
         * Navigator failed vallback function
         * 
         * @param  {[type]} error [description]
         * 
         * @return {[type]}       [description]
         */
        navigator_failed : function( error ) {

            switch( error.code ) {
                
                case error.PERMISSION_DENIED:
                    alert('User denied the request for Geolocation');       
                break;
                
                case error.POSITION_UNAVAILABLE:
                    alert('Location information is unavailable');  
                break;
                
                case error.TIMEOUT:
                    alert('The request to get user location timed out');
                break;
                    
                case error.UNKNOWN_ERROR:
                    alert('An unknown error occurred');
                break;
            }
        },

        /**
         * Address geocoder
         * 
         * @return {[type]} [description]
         */
        address_geocoder : function() {

            address_fields = {
                'address'   : '',
                'street'    : '',
                'apt'       : '',
                'city'      : '',
                'state'     : '',
                'zipcode'   : '',
                'country'   : ''
            };
            
            // collect the address fields value into an object
            $( '[data-gmw_xf_geocoder_enabled="1"]' ).each( function() {
                
                address_field = $( this ).data( 'geocoder_field' );
                
                address_fields[address_field] = $( this).val();
            });

            // get the full address field when using single address field method
            if ( GMW_XF.geocoder_type == 'single' ) {
                
                full_address = address_fields.address
            
            // otherwise, generate full address string from multiple address fields
            } else {
                
                full_address = address_fields.street + ' ' + address_fields.apt + ' ' + address_fields.city + ' ' + address_fields.state + ' ' + address_fields.zipcode + ' ' + address_fields.country;
            }

            // proceed with form submission if address field is empty
            if ( $.trim( full_address ).length == 0 ) {
                
                //submit the form
                setTimeout(function() {
                    
                    GMW_XF.submit = true;
                    GMW_XF.submit_button.click();
                    
                }, 200); 
               
            
            } else {

                // initiate the geocoder
                geocoder = new google.maps.Geocoder();
                    
                // set the region
                countryCode = ( GMW_XF.gmw_settings.general_settings.country_code != undefined && GMW_XF.gmw_settings.general_settings.country_code != '' ) ? gmw_xf_settings.general_settings.country_code : 'us';            
                
                //geocode the address
                geocoder.geocode( { 'address': full_address, 'region': countryCode }, function( results, status ) {
                    
                    // if successfully geocoded
                    if ( status == google.maps.GeocoderStatus.OK ) {    
                    
                        GMW_XF.populate_address_fields( results, 'address_geocoder' );
                    
                    // Otherwise, when failed
                    } else {   

                        var addressConfirm = confirm( 'We could not verify the address you entered for the following reason: ' + status +'. Would you like to continue anyway?' );
                        
                        if ( addressConfirm == true ) {
                            
                            //submit the form
                            setTimeout(function() {
                                
                                GMW_XF.submit = true;
                                GMW_XF.submit_button.click();
                                
                            }, 200);
                        
                        } else {

                            return false;
                        }
                    }
                });
            }
        },

        /**
         * Dynamically populate geocoded location fields
         * 
         * @param  {[type]} results [description]
         * @return {[type]}         [description]
         */
        populate_address_fields : function( results, type ) {

            $( '#gmw_xf_status' ).val( 1 );
            $( '#gmw_xf_lat' ).val( results[0].geometry.location.lat() );
            $( '#gmw_xf_lng' ).val( results[0].geometry.location.lng() );
            $( '#gmw_xf_formatted_address' ).val( results[0].formatted_address );

            if ( type == 'autofill' ) {
                $( '[data-gmw_xf_geocoder_enabled="1"][data-geocoder_field="address"]' ).val( results[0].formatted_address );
            }

            var street_number = false;
            var street        = false;
            var address       = results[0].address_components;
                     
            for ( x in address ) {
                
                // get the street number
                if ( address[x].types == 'street_number' ) {
                    street_number = address[x].long_name; 
                }
                
                // street name
                if ( address[x].types == 'route' ) {

                    street = address[x].long_name;  
                    
                    if ( street_number != false ) {
                        street = street_number + ' ' + street;
                    } 

                    $( '#gmw_xf_street' ).val( street );

                    if ( type == 'autofill' ) {
                        $( '[data-gmw_xf_geocoder_enabled="1"][data-geocoder_field="street"]' ).val( street );
                    }
                }
        
                if ( address[x].types == 'administrative_area_level_1,political' ) {
                    
                    $( '#gmw_xf_state_short' ).val( address[x].short_name );
                    $( '#gmw_xf_state_long' ).val( address[x].long_name );

                    if ( type == 'autofill' ) {
                        $( '[data-gmw_xf_geocoder_enabled="1"][data-geocoder_field="state"]' ).val( address[x].long_name );
                    }
                } 
                 
                if ( address[x].types == 'locality,political' ) {
                    
                    $( '#gmw_xf_city' ).val( address[x].long_name );

                    if ( type == 'autofill' ) {
                        $( '[data-gmw_xf_geocoder_enabled="1"][data-geocoder_field="city"]' ).val( address[x].long_name );
                    }
                 } 
                 
                if ( address[x].types == 'postal_code' ) {

                    $( '#gmw_xf_zipcode' ).val(address[x].long_name);

                    if ( type == 'autofill' ) {
                        $( '[data-gmw_xf_geocoder_enabled="1"][data-geocoder_field="zipcode"]' ).val( address[x].long_name );
                    }
                } 
                
                if ( address[x].types == 'country,political' ) {
                   
                    $( '#gmw_xf_country_short' ).val( address[x].short_name );
                    $( '#gmw_xf_country_long' ).val( address[x].long_name );

                    if ( type == 'autofill' ) {
                        $( '[data-gmw_xf_geocoder_enabled="1"][data-geocoder_field="country"]' ).val( address[x].short_name );
                    }
                 } 
            }
            
            if ( GMW_XF.submitted == true ) {
                
                //submit the form
                setTimeout(function() {

                    //if ( $( '#gmw_xf_status' ).val() != '1' ) {
                        
                      //  alert( 'We could not verify the address you entered.' );

                    //} else {
                        GMW_XF.submit = true;
                        GMW_XF.submit_button.click();
                    //}
                }, 700 ); 
            }
        }
    }

    GMW_XF.init();
});